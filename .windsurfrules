Organização e Estrutura do Código
    Classes curtas e coesas: Uma classe deve ter uma única responsabilidade e ser pequena o suficiente para ser facilmente compreendida.
    Métodos pequenos: Métodos devem ser curtos e realizar uma única tarefa. Se um método estiver se tornando grande, tente dividi-lo em submétodos.
    Evite linhas de código longas: Tente não ultrapassar 80-100 caracteres por linha de código.

Tratamento de Erros
    Exceções: Use exceções para lidar com erros, mas não abuse delas. Quando capturar exceções, seja específico (não apenas catch (Exception e)).
    Evite capturar exceções genéricas: Sempre que possível, capture exceções específicas que podem ocorrer no contexto do seu código.
    Bloco finally: Sempre que necessário, use o bloco finally para liberar recursos (como streams ou conexões de banco de dados).

Comentários e Documentação
    Documentação: Comente o código apenas quando necessário. A documentação Java (Javadoc) é fundamental para descrever o que cada classe, método ou função faz.
    Comentários úteis: Use comentários para explicar por que algo está sendo feito, não o que está sendo feito (o código já deve ser claro o suficiente para entender o que ele faz).
    Evite comentários óbvios: Comentários como // Incrementa o valor de x em x++ são desnecessários.
    Crie Javadocs em ingles para todos os métodos e classes criados.

Princípios SOLID
    S - Single Responsibility Principle (SRP): Cada classe deve ter uma única responsabilidade.
    O - Open/Closed Principle (OCP): O código deve ser aberto para extensão, mas fechado para modificação.
    L - Liskov Substitution Principle (LSP): As classes derivadas devem ser substituíveis por suas classes base sem afetar o comportamento do programa.
    I - Interface Segregation Principle (ISP): Uma classe não deve ser forçada a implementar interfaces que ela não utiliza.
    D - Dependency Inversion Principle (DIP): Dependa de abstrações, não de implementações.

Evite Código Duplicado
    DRY (Dont Repeat Yourself): Sempre que um trecho de código se repetir em mais de um lugar, extraia-o para um método ou classe. Isso facilita a manutenção e a leitura do código.
Performance e Eficiência
    Evite criação desnecessária de objetos: Crie objetos apenas quando necessário. Objetos desnecessários podem aumentar o uso de memória e a carga no coletor de lixo (garbage collector).
    Use Collections imutáveis: Collections imutáveis, como List.of() e Map.of(), são mais eficientes do que coleções mutáveis.
    Evite operações de I/O síncronas: Se uma operação de I/O (como leitura de arquivos, banco de dados, etc.) pode ser feita de maneira assíncrona, considere usar threads ou o framework CompletableFuture para otimizar a performance.